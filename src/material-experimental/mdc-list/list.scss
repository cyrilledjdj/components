@use '@material/list/evolution-mixins' as mdc-list;
@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/style/layout-common';

@include mdc-list.without-ripple($query: mdc-helpers.$mat-base-styles-query);

// MDC expects the list element to be a `<ul>`, since we use `<mat-list>` instead we need to
// explicitly set `display: block`
.mat-mdc-list-base {
  display: block;
}

// MDC expects that the list items are always `<li>`, since we actually use `<button>` in some
// cases, we need to make sure it expands to fill the available width.
.mat-mdc-list-item,
.mat-mdc-list-option {
  width: 100%;
  box-sizing: border-box;
}

// MDC doesn't have list dividers, so we use mat-divider and style appropriately.
// TODO(devversion): check if we can use the MDC dividers.
.mat-mdc-list-item,
.mat-mdc-list-option {
  .mat-divider-inset {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .mat-mdc-list-avatar ~ .mat-divider-inset {
    margin-left: 72px;

    [dir='rtl'] & {
      margin-right: 72px;
    }
  }
}

// MDC's hover and focus state styles are included with their ripple which we don't use.
// Instead we add the focus, hover and selected styles ourselves using this pseudo-element
.mat-mdc-list-item-interactive::before {
  @include layout-common.fill();
  content: '';
  opacity: 0;
}

// MDC always sets the cursor to `pointer`. We do not want to show this for non-interactive
// lists. See: https://github.com/material-components/material-components-web/issues/6443
.mat-mdc-list-non-interactive .mdc-list-item {
  cursor: default;
}

// The MDC-based list items already use the `::before` pseudo element for the standard
// focus/selected/hover state. Hence, we need to have a separate list-item spanning
// element that can be used for strong focus indicators.
.mat-mdc-list-item > .mat-mdc-focus-indicator {
  @include layout-common.fill();
  pointer-events: none;
}

// If there are projected lines, we project any remaining content into the list-item's end
// container and set the `--with-trailing-meta` class. If this container is empty due to no
// projected content though, we want to hide the element because otherwise the empty container
// would take up horizontal space. There is no good way to check for remaining projected content
// in the template, so we just use CSS with the `:empty` selector. Note that we need increased
// specificity here because MDC overrides the `display` with the `--trailing-meta` class too.
.mat-mdc-list-item.mdc-list-item--with-trailing-meta > .mdc-list-item__end:empty {
  display: none;
}
